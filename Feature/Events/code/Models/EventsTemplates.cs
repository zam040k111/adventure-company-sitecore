
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

using Adventure.Foundation.ORM.Models;

namespace Feature.Events.FeaturedEvents.RenderingParameters
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;
    using global::Sitecore.Data;

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    ///[RepresentsSitecoreTemplateAttribute("{f847d1bb-af68-4477-b687-9986a3a664ed}", "", "Feature.Events")]
    [SitecoreType(TemplateId = Constants.BackgoundColor.TemplateIdString)]
	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public partial interface IBackgoundColor : IGlassBase
    {
        
        /// <summary>Represents the BackgroundColor field (ee8d1c9c-4217-4115-b785-62f800de4aab).</summary>
        [SitecoreField(FieldName = Constants.BackgoundColor.Fields.BackgroundColor_FieldName)]
        string BackgroundColor { get; set; }

    }

}

namespace Feature.Events.FeaturedEvents.RenderingParameters.Constants
{
    using global::Sitecore.Data;
	using System.CodeDom.Compiler;

	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public struct BackgoundColor
    {
        public const string TemplateIdString = "f847d1bb-af68-4477-b687-9986a3a664ed";
        public static readonly ID TemplateId = new ID(TemplateIdString);

        
        public struct Fields
        {
        public static readonly ID BackgroundColor = new ID("ee8d1c9c-4217-4115-b785-62f800de4aab");
        public const string BackgroundColor_FieldName = "BackgroundColor";

        }
    }
}
namespace Feature.Events
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;
    using global::Sitecore.Data;
    using Foundation.ORM.Sitecore.templates.Project.Adventure;

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    ///[RepresentsSitecoreTemplateAttribute("{ffd5cd25-afb7-4002-886e-65f4a4457043}", "", "Feature.Events")]
    [SitecoreType(TemplateId = Constants.Carousel.TemplateIdString)]
	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public partial interface ICarousel : global::Foundation.Assets.IRenderingAssets
    {
        
        /// <summary>Represents the ButtonName field (0b516f06-a1cb-4f35-a009-0a50083a82a5).</summary>
        [SitecoreField(FieldName = Constants.Carousel.Fields.ButtonName_FieldName)]
        string ButtonName { get; set; }

        /// <summary>Represents the CarouselItems field (d969d505-5cba-4c2b-ba81-e8ea18c42f08).</summary>
        [SitecoreField(FieldName = Constants.Carousel.Fields.CarouselItems_FieldName)]
        IEnumerable<IEventDetailsPage> CarouselItems { get; set; }

    }

}

namespace Feature.Events.Constants
{
    using global::Sitecore.Data;
	using System.CodeDom.Compiler;

	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public struct Carousel
    {
        public const string TemplateIdString = "ffd5cd25-afb7-4002-886e-65f4a4457043";
        public static readonly ID TemplateId = new ID(TemplateIdString);

        
        public struct Fields
        {
        public static readonly ID ButtonName = new ID("0b516f06-a1cb-4f35-a009-0a50083a82a5");
        public const string ButtonName_FieldName = "ButtonName";

        public static readonly ID CarouselItems = new ID("d969d505-5cba-4c2b-ba81-e8ea18c42f08");
        public const string CarouselItems_FieldName = "CarouselItems";

        }
    }
}
namespace Feature.Events.Footer
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;
    using global::Sitecore.Data;

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    ///[RepresentsSitecoreTemplateAttribute("{0024d10e-b1b2-49c9-8624-481cc4ab8fd8}", "", "Feature.Events")]
    [SitecoreType(TemplateId = Constants.Footer.TemplateIdString)]
	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public partial interface IFooter : IGlassBase
    {
        
        /// <summary>Represents the Copyright field (7bf2b4c7-217d-4393-8643-872b932ca0c2).</summary>
        [SitecoreField(FieldName = Constants.Footer.Fields.Copyright_FieldName)]
        string Copyright { get; set; }

        /// <summary>Represents the Links field (463ec1db-4f2e-4619-b027-a18cacf63a30).</summary>
        [SitecoreField(FieldName = Constants.Footer.Fields.Links_FieldName)]
        IEnumerable<ILink> Links { get; set; }

    }

}

namespace Feature.Events.Footer.Constants
{
    using global::Sitecore.Data;
	using System.CodeDom.Compiler;

	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public struct Footer
    {
        public const string TemplateIdString = "0024d10e-b1b2-49c9-8624-481cc4ab8fd8";
        public static readonly ID TemplateId = new ID(TemplateIdString);

        
        public struct Fields
        {
        public static readonly ID Copyright = new ID("7bf2b4c7-217d-4393-8643-872b932ca0c2");
        public const string Copyright_FieldName = "Copyright";

        public static readonly ID Links = new ID("463ec1db-4f2e-4619-b027-a18cacf63a30");
        public const string Links_FieldName = "Links";

        }
    }
}
namespace Feature.Events
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;
    using global::Sitecore.Data;

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    ///[RepresentsSitecoreTemplateAttribute("{66d33dd3-d0cd-440a-930b-604ed180a580}", "", "Feature.Events")]
    [SitecoreType(TemplateId = Constants.GoogleMap.TemplateIdString)]
	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public partial interface IGoogleMap : IGlassBase
    {
        
        /// <summary>Represents the FinishLocation field (2ff8099a-4da5-405a-b292-a9c139c5cb60).</summary>
        [SitecoreField(FieldName = Constants.GoogleMap.Fields.FinishLocation_FieldName)]
        string FinishLocation { get; set; }

        /// <summary>Represents the StartLocation field (354423ff-96e0-4dd6-a3ad-0d9086b0fdca).</summary>
        [SitecoreField(FieldName = Constants.GoogleMap.Fields.StartLocation_FieldName)]
        string StartLocation { get; set; }

    }

}

namespace Feature.Events.Constants
{
    using global::Sitecore.Data;
	using System.CodeDom.Compiler;

	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public struct GoogleMap
    {
        public const string TemplateIdString = "66d33dd3-d0cd-440a-930b-604ed180a580";
        public static readonly ID TemplateId = new ID(TemplateIdString);

        
        public struct Fields
        {
        public static readonly ID FinishLocation = new ID("2ff8099a-4da5-405a-b292-a9c139c5cb60");
        public const string FinishLocation_FieldName = "FinishLocation";

        public static readonly ID StartLocation = new ID("354423ff-96e0-4dd6-a3ad-0d9086b0fdca");
        public const string StartLocation_FieldName = "StartLocation";

        }
    }
}
namespace Feature.Events.Footer
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;
    using global::Sitecore.Data;

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    ///[RepresentsSitecoreTemplateAttribute("{04392dc9-5222-4275-8962-d01e03cd61c6}", "", "Feature.Events")]
    [SitecoreType(TemplateId = Constants.Link.TemplateIdString)]
	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public partial interface ILink : IGlassBase
    {
        
        /// <summary>Represents the Text field (923e440f-1fc1-47b4-bfff-37d329f561bb).</summary>
        [SitecoreField(FieldName = Constants.Link.Fields.Text_FieldName)]
        string Text { get; set; }

        /// <summary>Represents the Url field (7c584eed-0d35-4c83-941c-b130428e5665).</summary>
        [SitecoreField(FieldName = Constants.Link.Fields.Url_FieldName)]
        string Url { get; set; }

    }

}

namespace Feature.Events.Footer.Constants
{
    using global::Sitecore.Data;
	using System.CodeDom.Compiler;

	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public struct Link
    {
        public const string TemplateIdString = "04392dc9-5222-4275-8962-d01e03cd61c6";
        public static readonly ID TemplateId = new ID(TemplateIdString);

        
        public struct Fields
        {
        public static readonly ID Text = new ID("923e440f-1fc1-47b4-bfff-37d329f561bb");
        public const string Text_FieldName = "Text";

        public static readonly ID Url = new ID("7c584eed-0d35-4c83-941c-b130428e5665");
        public const string Url_FieldName = "Url";

        }
    }
}
namespace Feature.Events
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;
    using global::Sitecore.Data;
    using Foundation.ORM.Sitecore.templates.Project.Adventure;

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    ///[RepresentsSitecoreTemplateAttribute("{a97d39da-6df2-47f3-b60c-81afa08e7509}", "", "Feature.Events")]
    [SitecoreType(TemplateId = Constants.UpcomingEvents.TemplateIdString)]
	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public partial interface IUpcomingEvents : global::Foundation.Assets.IRenderingAssets
    {
        
        /// <summary>Represents the ButtonName field (b203246e-4687-4b6f-a31c-f016f436379c).</summary>
        [SitecoreField(FieldName = Constants.UpcomingEvents.Fields.ButtonName_FieldName)]
        string ButtonName { get; set; }

        /// <summary>Represents the ButtonUrl field (7592d277-ef12-46bd-85a7-354d5ecb39ff).</summary>
        [SitecoreField(FieldName = Constants.UpcomingEvents.Fields.ButtonUrl_FieldName)]
        string ButtonUrl { get; set; }

        /// <summary>Represents the Events field (ed300f3d-92e0-425e-972b-5f520787a544).</summary>
        [SitecoreField(FieldName = Constants.UpcomingEvents.Fields.Events_FieldName)]
        IEnumerable<IEventDetailsPage> Events { get; set; }

        /// <summary>Represents the EventsCount field (d63aea71-42a7-4211-b2eb-0d1aac62a824).</summary>
        [SitecoreField(FieldName = Constants.UpcomingEvents.Fields.EventsCount_FieldName)]
        int EventsCount { get; set; }

        /// <summary>Represents the StartDate field (15585052-f0a2-4be0-9728-a0eff855a9e7).</summary>
        [SitecoreField(FieldName = Constants.UpcomingEvents.Fields.StartDate_FieldName)]
        DateTime StartDate { get; set; }

    }

}

namespace Feature.Events.Constants
{
    using global::Sitecore.Data;
	using System.CodeDom.Compiler;

	[GeneratedCode("Leprechaun", "1.0.0.0")]
    public struct UpcomingEvents
    {
        public const string TemplateIdString = "a97d39da-6df2-47f3-b60c-81afa08e7509";
        public static readonly ID TemplateId = new ID(TemplateIdString);

        
        public struct Fields
        {
        public static readonly ID ButtonName = new ID("b203246e-4687-4b6f-a31c-f016f436379c");
        public const string ButtonName_FieldName = "ButtonName";

        public static readonly ID ButtonUrl = new ID("7592d277-ef12-46bd-85a7-354d5ecb39ff");
        public const string ButtonUrl_FieldName = "ButtonUrl";

        public static readonly ID Events = new ID("ed300f3d-92e0-425e-972b-5f520787a544");
        public const string Events_FieldName = "Events";

        public static readonly ID EventsCount = new ID("d63aea71-42a7-4211-b2eb-0d1aac62a824");
        public const string EventsCount_FieldName = "EventsCount";

        public static readonly ID StartDate = new ID("15585052-f0a2-4be0-9728-a0eff855a9e7");
        public const string StartDate_FieldName = "StartDate";

        }
    }
}

